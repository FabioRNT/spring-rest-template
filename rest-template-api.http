### REST Template API Test File
### This file contains HTTP requests to test the REST Template API
### You can use this file with REST Client extensions in VS Code or IntelliJ IDEA

@baseUrl = http://localhost:8080
@contentType = application/json
@corsOrigin = http://example.com

### Test CORS Preflight Request
### This simulates a browser's preflight OPTIONS request to check CORS permissions
OPTIONS {{baseUrl}}/api/users
Origin: {{corsOrigin}}
Access-Control-Request-Method: POST
Access-Control-Request-Headers: Content-Type, Authorization

### Test CORS Cross-Origin Request
### This simulates a request from a different origin
GET {{baseUrl}}/api/users
Origin: {{corsOrigin}}
Accept: {{contentType}}

### Get all users
GET {{baseUrl}}/api/users
Accept: {{contentType}}

### Get user by ID
GET {{baseUrl}}/api/users/2
Accept: {{contentType}}

### Create a new user
POST {{baseUrl}}/api/users
Content-Type: {{contentType}}

{
  "username": "johndoe",
  "email": "john.doe@example.com",
  "password": "securepassword123"
}

### Update an existing user
PUT {{baseUrl}}/api/users/2
Content-Type: {{contentType}}

{
  "username": "johndoe_updated",
  "email": "john.updated@example.com",
  "password": "newsecurepassword456"
}

### Delete a user
DELETE {{baseUrl}}/api/users/1
Accept: {{contentType}}

### Create a test user
POST {{baseUrl}}/api/users
Content-Type: {{contentType}}

{
  "username": "testuser",
  "email": "test.user@example.com",
  "password": "testpassword123"
}

### Create another test user
POST {{baseUrl}}/api/users
Content-Type: {{contentType}}

{
  "username": "anotheruser",
  "email": "another.user@example.com",
  "password": "anotherpassword456"
}

### Test Email Uniqueness - Try to create a user with an existing email
### This should return a 409 Conflict response
POST {{baseUrl}}/api/users
Content-Type: {{contentType}}

{
  "username": "duplicateuser",
  "email": "john.doe@example.com",
  "password": "duplicatepassword789"
}

### Test Email Uniqueness on Update - Try to update a user with an existing email
### This should return a 409 Conflict response
### Note: Replace '2' with an actual user ID that exists in your database
PUT {{baseUrl}}/api/users/2
Content-Type: {{contentType}}

{
  "username": "updateduser",
  "email": "john.doe@example.com",
  "password": "updatedpassword123"
}

### Partially update a user (PATCH)
### This only updates the specified fields
PATCH {{baseUrl}}/api/users/2
Content-Type: {{contentType}}

{
  "username": "patched_username"
}

### Test validation error - This should return a 422 Unprocessable Entity
POST {{baseUrl}}/api/users
Content-Type: {{contentType}}

{
  "username": "a",
  "email": "invalid-email",
  "password": "123"
}

### Test malformed JSON - This should return a 422 Unprocessable Entity
POST {{baseUrl}}/api/users
Content-Type: {{contentType}}

{
  "username": "testuser",
  "email": "test.user@example.com",
  "password": "testpassword123",
}
